{"version":3,"sources":["ToDoBanner.js","ToDoCreator.js","ToDoRow.js","VisibilityControl.js","App.js","serviceWorker.js","index.js"],"names":["ToDoBanner","render","className","props","name","task","filter","t","done","length","Component","ToDoCreator","properties","updateNewTextValue","event","setState","newItemText","target","value","createNewToDo","callback","state","onChange","onClick","ToDoRow","item","action","type","checked","VisibilityController","isChecked","e","description","Apo","updateNextTextValue","todoItems","find","localStorage","setItem","JSON","stringify","togleToDo","todo","map","todoTableRows","doneValue","key","componentDidCount","data","getItem","parse","username","showCompleted","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.819b5964.chunk.js","sourcesContent":["import React ,{Component} from 'react';\n\nexport class ToDoBanner extends Component\n{\n\nrender=()=>\n<div>\n<h4 className=\"bg-primary text-white text-center p-2\">\n{this.props.name}'s to Do List\n({this.props.task.filter(t=> !t.done).length} items to do)\n</h4>\n</div>\n}\n","import React, {Component} from 'react';\nexport class ToDoCreator extends Component\n{\nconstructor(properties)\n{\nsuper(properties);\nthis.state={ newItemText:\"\"}\n}\n\nupdateNewTextValue=(event)=>{\nthis.setState({\nnewItemText:event.target.value});\n}\n\ncreateNewToDo=(event)=>{\nthis.props.callback(this.state.newItemText);\nthis.setState({newItemText:\"\"});\n}\n\nrender=()=>\n<div className=\"my-1\">\n<input  className=\"form-control\" value={this.state.newItemText} onChange={this.updateNewTextValue}/>\n<button className=\"btn btn-primary mt-1\" onClick={this.createNewToDo}>Add</button>\n</div>\n\n}\n","import React,{Component} from 'react';\n\nexport class ToDoRow extends Component\n{\nrender=()=>\n<tr>\n<td>{this.props.item.action}</td>\n<td><input type=\"checkbox\" checked={this.props.item.done}  onChange={()=> this.props.callback(this.props.item)}/></td>\n</tr>\n}\n","import React ,{Component} from 'react';\nexport class VisibilityController extends Component\n{\n\nrender=()=>\n<div className=\"form-check\">\n<input className=\"form-check-input\" type=\"checkbox\" checked={this.props.isChecked} onChange={(e)=>this.props.callback(e.target.checked)}/>\n<label className=\"form-check-label\">Show {this.props.description}\n</label>\n</div>\n\n}\n","import React,{Component} from 'react';\nimport {ToDoBanner} from \"./ToDoBanner\";\nimport {ToDoCreator} from \"./ToDoCreator\";\nimport {ToDoRow} from \"./ToDoRow\";\nimport {VisibilityController} from \"./VisibilityControl\"\n\nexport default class Apo extends Component\n{\nconstructor(properties)\n{\nsuper(properties);\nthis.state={\nusername:\"Ashutosh\",\ntodoItems:[{action:\"book\",done:false},\n{action:\"gocery\",done:false},\n{action:\"vegitable\",done:false},\n{action:\"juice\",done:false},\n{action:\"milk\",done:false}\n],\nshowCompleted:true\n}\n\n}\n\nupdateNextTextValue=(event)=>\n{\nthis.setState({newItemText:event.target.value});\n}\n\ncreateNewToDo=(task)=>\n{\nif(!this.state.todoItems.find(item=>item.action===task))\n{\nthis.setState({\ntodoItems:[...this.state.todoItems,{action:task,done:false}]\n},()=>localStorage.setItem(\"todos\",JSON.stringify(this.state)));\n}\n}\n\n\n\ntogleToDo=(todo)=>this.setState({\ntodoItems:this.state.todoItems.map(item=>item.action===todo.action?{...item,done:!item.done}:item)});\n\n\n\ntodoTableRows=(doneValue)=>this.state.todoItems.filter(item=>item.done===doneValue).map(\nitem=><ToDoRow key={item.action} item={item} callback={this.togleToDo}/>);\n\n\n\ncomponentDidCount=()=>{\nlet data=localStorage.getItem(\"todos\");\nthis.state=(data!=null?JSON.parse(data):{\nusername:\"Ashutosh\",\ntodoItems:[{action:\"book\",done:false},\n{action:\"gocery\",done:false},\n{action:\"vegitable\",done:true},\n{action:\"juice\",done:false},\n{action:\"milk\",done:true}\n],\nshowCompleted:true\n});\n}\n\n\n\nrender=()=>\n<div>\n<ToDoBanner name={this.state.username} task={this.state.todoItems} />\n<div className=\"container-fluid\">\n<ToDoCreator callback={this.createNewToDo}/>\n<table  className=\"table table-striped table-bordered\">\n<thead>\n<tr>\n<th>Decription</th><th>Done</th>\n</tr>\n</thead>\n<tbody>\n{this.todoTableRows(false)}\n</tbody>\n</table>\n<div className=\"bg-secondary text-white text-center p-2\">\n<VisibilityController description=\"Completed Tasks\" isChecked={this.state.showCompleted} callback={(checked)=>this.setState({showCompleted:checked})}/>\n</div>\n{ this.state.showCompleted &&\n<table className=\"table table-striped table-bordered\">\n<thead>\n<tr><th>Description</th><th>Done</th></tr>\n</thead>\n<tbody>{ this.todoTableRows(true) }</tbody>\n</table>\n}\n</div>\n</div>\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';import 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}